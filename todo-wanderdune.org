* Pagination 
- I need a smarter way to identify prev and next pages. It works fine for my current setup, but will break with more features. i.e
- Next post / previous post by time or tag or keyword currently doesn't work.
- it would work though, given my 'group' and 'page' groupers. those can easily set up proper paging for their payloads and give the information as a general page structure where each payload is *all the data* + the current index. so that I can also do stuff like "next post, next-next post, next-next-next post", etc

* Routing, part two
- Paging doesn't work well with routing. I already have a half-working solution where the DunePagination knows about the current paging-path. This sould work for all pagings and groups. Then, routing could be auto-generated from the `Builder` structure. I.e. the builder could do something like `primary()` to indicate that this is the primary route to access posts. and any post that is written by the postbuilder will remember the path for that post identifier in an internal router. same with the groupings for a tag.


* FIXME:
- Error Handling
- Unit Tests
- the collection & parsing of items should happen on multiple threads possible with the rust go channels so that even for large post bases, the parsing is fast
- the writing of items could also happen on multiple threads, if the write actions are stored in a dependency tree, i.e. each folder for a year would be a new node in the tree, each month for each year a subnode of the respective tree node then, we could paraellilize all years, and thend for each year all months

- 
* Missing Actions
- copy files
- write project page
- create directory (if it doesn't exist  yet)
 
* Tasks
** TODO I don't need into_collected anymore, except if I really want to do multi-threading?

